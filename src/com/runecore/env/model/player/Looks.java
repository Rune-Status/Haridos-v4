package com.runecore.env.model.player;

import com.runecore.env.model.container.Container;
import com.runecore.env.model.def.ItemDefinition;
import com.runecore.env.model.item.Item;
import com.runecore.network.io.MessageBuilder;

/**
 * Looks.java
 * @author Harry Andreas<harry@runecore.org>
 * Feb 12, 2013
 */
public class Looks {
    
    private final int[] look = new int[7];
    private final int[] colour = new int[5];
    private int npc = -1;
    
    public Looks() {
	getLook()[0] = 3; // Hair
        getLook()[1] = 14; // Beard
        getLook()[2] = 18; // Torso
        getLook()[3] = 26; // Arms
        getLook()[4] = 34; // Bracelets
        getLook()[5] = 38; // Legs
        getLook()[6] = 42; // Shoes
        for (int i = 0; i < 5; i++) {
            getColour()[i] = 6;
        }
    }
    
    public static final byte SLOT_HAT = 0, SLOT_CAPE = 1, SLOT_AMULET = 2,
		SLOT_WEAPON = 3, SLOT_CHEST = 4, SLOT_SHIELD = 5, SLOT_LEGS = 7,
		SLOT_HANDS = 9, SLOT_FEET = 10, SLOT_RING = 12, SLOT_ARROWS = 13;
    
    public MessageBuilder generate(Player player) {
	MessageBuilder builder = new MessageBuilder();
	int hash = 0;
	hash |= 0 & 0x1;
	builder.writeByte(hash);
	builder.writeByte(0); //name title
	builder.writeByte(-1); //pk 
	builder.writeByte(-1); //head
	if(npc != -1) {
	    builder.writeShort(-1);
	    builder.writeShort(1);
	    builder.writeByte(0);
	} else {
	    Container e = player.get("equipment");
	    for (int i = 0; i < 4; i++) {
		if (e.get(i) == null)
		    builder.writeByte(0);
		else
		    builder.writeShort(32768 + e.get(i).getDefinition().equipId);
	    }
	    if ((e.get(SLOT_CHEST) != null) && e.get(SLOT_CHEST).getId() > 0) {
		builder.writeShort(32768 + e.get(SLOT_CHEST).getDefinition().equipId);
	    } else {
		builder.writeShort(0x100 + getLook()[2]);
	    }
	    if ((e.get(SLOT_SHIELD) != null)  && e.get(SLOT_SHIELD).getId() > 0) {
		builder.writeShort(32768 + e.get(SLOT_SHIELD).getDefinition().equipId);
	    } else {
		builder.writeByte((byte) 0);
	    }
	    Item chest = e.get(SLOT_CHEST);
	    if (chest != null && chest.getId() > 0) {
		if (!isFullBody(chest.getDefinition())) {
		    builder.writeShort(0x100 + getLook()[3]);
		} else {
		    builder.writeByte((byte) 0);
		}
	    } else {
		builder.writeShort(0x100 + getLook()[3]);
	    }
	    if ((e.get(SLOT_LEGS) != null) && e.get(SLOT_LEGS).getId() > 0) {
		builder.writeShort(32768 + e.get(SLOT_LEGS).getDefinition().equipId);
	    } else {
		builder.writeShort(0x100 + getLook()[5]);
	    }
	    Item hat = e.get(SLOT_HAT);
	    if (hat != null && hat.getId() > 0) {
		if (!isFullHat(hat.getDefinition())
			&& !isFullMask(hat.getDefinition())) {
		    builder.writeShort(0x100 + getLook()[0]);
		} else {
		    builder.writeByte((byte) 0);
		}
	    } else {
		builder.writeShort(0x100 + getLook()[0]);
	    }
	    if ((e.get(SLOT_HANDS) != null) && e.get(SLOT_HANDS).getId() > 0) {
		builder.writeShort(32768 + e.get(SLOT_HANDS).getDefinition().equipId);
	    } else {
		builder.writeShort(0x100 + getLook()[4]);
	    }
	    if ((e.get(SLOT_FEET) != null) && e.get(SLOT_FEET).getId() > 0) {
		builder.writeShort(32768 + e.get(SLOT_FEET).getDefinition().equipId);
	    } else {
		builder.writeShort(0x100 + getLook()[6]);
	    }
	    if (hat != null && hat.getId() > 0) {
		if (!isFullMask(hat.getDefinition())) {
		    builder.writeShort(0x100 + getLook()[1]);
		} else {
		    builder.writeByte((byte) 0);
		}
	    } else {
		builder.writeShort(0x100 + getLook()[1]);
	    }
	}
	for(int i = 0; i < 5; i++) {
	    builder.writeByte(getColour()[i]);
	}
	builder.writeShort(player.getRenderId());
	builder.writeString(player.getDefinition().getName());
	builder.writeShort(player.getDefinition().getCombatLevel());
	builder.writeShort(0);
	builder.writeByte(0);
	return builder;
    }

    public int[] getLook() {
	return look;
    }

    public int[] getColour() {
	return colour;
    }
    
    public static boolean isFullBody(ItemDefinition def) {
	int wearId = def.getId();
	for (int i = 0; i < FULL_BODY.length; i++) {
	    if (wearId == FULL_BODY[i]) {
		return true;
	    }
	}
	return false;
    }

    public static boolean isFullHat(ItemDefinition def) {
	int wearId = def.getId();
	for (int i = 0; i < FULL_HAT.length; i++) {
	    if (wearId == FULL_HAT[i]) {
		return true;
	    }
	}
	return false;
    }

    public static boolean isFullMask(ItemDefinition def) {
	int wearId = def.getId();
	for (int i = 0; i < FULL_MASK.length; i++) {
	    if (wearId == FULL_MASK[i]) {
		return true;
	    }
	}
	return false;
    }
    
    public static int FULL_BODY[] = {10605, 20141, 20140, 20139, 75, 284, 426, 430, 540, 544, 546, 577,
	581, 636, 638, 640, 642, 644, 1035, 1115, 1117, 1119, 1121, 1123,
	1125, 1127, 1833, 1844, 2405, 2583, 2591, 2599, 2607, 2615, 2623,
	2653, 2661, 2669, 2896, 2906, 2916, 2926, 2936, 3058, 3140, 3387,
	3481, 3767, 3769, 3771, 3773, 3775, 3793, 4069, 4091, 4101, 4111,
	4298, 4504, 4509, 4712, 4720, 4728, 4736, 4749, 4757, 4868, 4869,
	4870, 4871, 4872, 4892, 4893, 4894, 4895, 4896, 4916, 4917, 4918,
	4919, 4920, 4940, 4941, 4942, 4943, 4944, 4964, 4965, 4966, 4967,
	4968, 4988, 4989, 4990, 4991, 4992, 5024, 5026, 5028, 5030, 5032,
	5034, 5575, 6065, 6107, 6129, 6133, 6139, 6180, 6184, 6186, 6322,
	6341, 6351, 6361, 6371, 6384, 6388, 6394, 6617, 6654, 6750, 6786,
	6916, 7390, 7392, 7399, 8839, 8952, 8953, 8954, 8955, 8956, 8957,
	8958, 9070, 9097, 9634, 9640, 9674, 9924, 9944, 10037, 10043,
	10049, 10053, 10057, 10061, 10065, 10316, 10318, 10320, 10322,
	10324, 10330, 10338, 10348, 10370, 10378, 10386, 10400, 10404,
	10408, 10412, 10416, 10420, 10424, 10428, 10432, 10436, 10458,
	10460, 10462, 10551, 10564, 10610, 10611, 10618, 10619, 10620,
	10621, 10622, 10623, 10624, 10625, 10626, 10627, 10628, 10630,
	10632, 10633, 10634, 10686, 10687, 10688, 10690, 10691, 10697,
	10698, 10714, 10715, 10716, 10717, 10718, 10727, 10748, 10750,
	10752, 10754, 10756, 10776, 10778, 10780, 10782, 10784, 10786,
	10788, 10790, 10792, 10794, 10798, 10800, 10822, 10837, 10863,
	10939, 10945, 10954, 11020, 11720, 11724, 11756, 11757, 11758,
	12563, 12873, 12874, 12875, 12876, 12877, 12878, 12894, 12895,
	12896, 12897, 12898, 12899, 12971, 12972, 12973, 12974, 12975,
	12976, 13181, 13182, 13183, 13184, 13185, 13186, 13187, 13297,
	13316, 13412, 13415, 13418, 13456, 13458, 13481, 13482, 13502,
	13509, 13514, 13519, 13544, 13548, 13553, 13614, 13619, 13624,
	13668, 13673, 13677, 13681, 13691, 13692, 13693, 13694, 13695,
	13696, 13785, 13800, 13805, 13820, 13825, 13830, 13835, 13858,
	13860, 13870, 13872, 13884, 13886, 13887, 13889, 13908, 13910,
	13911, 13913, 13932, 13934, 13944, 13946, 13958, 13960, 14076,
	14078, 14086, 14094, 14114, 14118, 14317, 14319, 14321, 14323,
	14325, 14347, 14349, 14351, 14353, 14355, 14391, 14393, 14395,
	14397, 14399, 14479, 14481, 14492, 14497, 14593, 14595, 14600,
	14601, 14730, 14732, 14936, 15022, 15028, 15034, 15040, 15423,
	15424, 15503, 15600, 15606, 15612, 15618, 15837, 15838, 15839,
	15840, 15841, 15842, 15843, 15844, 15845, 15846, 15847, 16013,
	16014, 16015, 16016, 16017, 16018, 16019, 16020, 16021, 16022,
	16023, 16068, 16069, 16070, 16071, 16072, 16073, 16074, 16075,
	16076, 16077, 16078, 16080, 16081, 16082, 16083, 16084, 16085,
	16086, 16087, 16088, 16089, 16090, 16713, 16715, 16717, 16719,
	16721, 16723, 16725, 16727, 16729, 16731, 16733, 17173, 17175,
	17177, 17179, 17181, 17183, 17185, 17187, 17189, 17191, 17193,
	17217, 17219, 17221, 17223, 17225, 17227, 17229, 17231, 17233,
	17235, 17237, 17239, 17241, 17243, 17245, 17247, 17249, 17251,
	17253, 17255, 17257, 17259, 18695, 18697, 18699, 18706, 19167,
	19173, 19179, 19181, 19188, 19194, 19200, 19202, 19209, 19215,
	19221, 19223, 19230, 19236, 19242, 19244, 19251, 19257, 19263,
	19265, 19317, 19319, 19337, 19342, 19380, 19382, 19384, 19398,
	19400, 19413, 19415, 19428, 19430, 19481, 19482, 19483, 19484,
	19485, 19486, 19487, 19488, 19489, 19490, 19491, 19492, 19493,
	19494, 19495, 19508, 19509, 19510, 19511, 19512, 19514, 19515,
	19516, 19517, 19518, 19519, 19706, 19735, 19757, 19781, 19785,
	19787, 19789, 20044 };
public static int FULL_MASK[] = { 1053, 1055, 1057, 1153, 1155, 1157, 1159,
	1161, 1163, 1165, 1506, 2587, 2595, 2603, 2611, 2619, 2627, 2657,
	2665, 2673, 3057, 3486, 4071, 4551, 4724, 4732, 4745, 4753, 4904,
	4905, 4906, 4907, 4908, 4928, 4929, 4930, 4931, 4932, 4952, 4953,
	4954, 4955, 4956, 4976, 4977, 4978, 4979, 4980, 5554, 5574, 6131,
	6188, 6623, 7534, 7594, 8464, 8466, 8468, 8470, 8472, 8474, 8476,
	8478, 8480, 8482, 8484, 8486, 8488, 8490, 8492, 8494, 8682, 8684,
	8686, 8688, 8690, 8692, 8694, 8696, 8698, 8700, 8702, 8704, 8706,
	8708, 8710, 8712, 9096, 9629, 9672, 9920, 10609, 10612, 10614,
	10629, 10721, 10723, 11278, 11282, 11335, 11789, 11790, 12207,
	12209, 12658, 12659, 12664, 12665, 12666, 12667, 12668, 12669,
	13263, 13414, 13449, 13496, 13538, 13539, 13540, 13803, 13808,
	13823, 13828, 13833, 13838, 14494, 14594, 14636, 14637, 15422,
	15492, 15496, 15497, 15892, 15893, 15894, 15895, 15896, 15897,
	15898, 15899, 15900, 15901, 15902, 15914, 15915, 15916, 15917,
	15918, 15919, 15920, 15921, 15922, 15923, 15924, 16050, 16051,
	16052, 16053, 16054, 16055, 16056, 16691, 16693, 16695, 16697,
	16699, 16701, 16703, 16705, 16707, 16709, 16711, 16735, 16737,
	16739, 16741, 16743, 16745, 16747, 16749, 16751, 16753, 16755,
	17049, 17051, 17053, 17055, 17057, 17059, 17061, 18708, 19336,
	19341, 19407, 19409, 19422, 19424, 19437, 19439, 19496, 19497,
	19498, 19499, 19500, 19501, 19502, 19503, 19504, 19505, 19506,
	19507, 19783, 20070 };
public static int FULL_HAT[] = { 20135, 4502, 74, 1137, 1139, 1141, 1143, 1145,
	1147, 1149, 1151, 1167, 1169, 3385, 3748, 3749, 3751, 3753, 3755,
	4302, 4506, 4511, 4513, 4515, 4567, 4708, 4716, 4856, 4857, 4858,
	4859, 4860, 4880, 4881, 4882, 4883, 4884, 6109, 6128, 6137, 6326,
	6392, 6400, 6621, 6665, 6856, 6858, 6860, 6862, 6885, 6886, 6887,
	7003, 7112, 7124, 7130, 7136, 7400, 7539, 8924, 8925, 8926, 8927,
	8928, 8949, 8950, 8959, 8960, 8961, 8962, 8963, 8964, 8965, 9068,
	9749, 9752, 9755, 9758, 9761, 9764, 9767, 9770, 9773, 9776, 9779,
	9782, 9785, 9788, 9791, 9794, 9797, 9800, 9803, 9806, 9809, 9812,
	9814, 9925, 9945, 9946, 9950, 10039, 10045, 10051, 10286, 10288,
	10290, 10292, 10294, 10296, 10298, 10300, 10302, 10304, 10306,
	10308, 10310, 10312, 10314, 10334, 10342, 10350, 10374, 10382,
	10390, 10392, 10398, 10452, 10454, 10456, 10507, 10547, 10548,
	10549, 10550, 10589, 10604, 10606, 10613, 10699, 10700, 10701,
	10702, 10703, 10704, 10705, 10706, 10707, 10708, 10709, 10710,
	10711, 10712, 10713, 10722, 10728, 10740, 10746, 10828, 10862,
	10883, 10941, 11021, 11200, 11277, 11280, 11663, 11664, 11665,
	11674, 11675, 11676, 11718, 12171, 12204, 12206, 12559, 12660,
	12661, 12662, 12663, 12670, 12671, 12672, 12673, 12674, 12675,
	12676, 12677, 12678, 12679, 12680, 12681, 12866, 12867, 12868,
	12869, 12870, 12871, 12887, 12888, 12889, 12890, 12891, 12892,
	12936, 12937, 12938, 12939, 12940, 12941, 12943, 12944, 12945,
	12946, 12947, 12948, 12950, 12951, 12952, 12953, 12954, 12955,
	12957, 12958, 12959, 12960, 12961, 12962, 12964, 12965, 12966,
	12967, 12968, 12969, 13105, 13107, 13109, 13111, 13113, 13115,
	13168, 13169, 13170, 13171, 13172, 13173, 13188, 13189, 13190,
	13191, 13192, 13193, 13194, 13339, 13340, 13341, 13342, 13343,
	13344, 13345, 13346, 13347, 13348, 13349, 13350, 13351, 13352,
	13353, 13354, 13357, 13370, 13372, 13374, 13376, 13377, 13378,
	13399, 13400, 13407, 13408, 13409, 13410, 13411, 13417, 13455,
	13495, 13501, 13546, 13550, 13554, 13667, 13680, 13684, 13763,
	13783, 13784, 13789, 13792, 13795, 13796, 13797, 13798, 13799,
	13864, 13866, 13876, 13878, 13896, 13898, 13920, 13922, 13938,
	13940, 13950, 13952, 13961, 13963, 14096, 14116, 14120, 14337,
	14339, 14341, 14343, 14345, 14367, 14369, 14371, 14373, 14375,
	14411, 14413, 14415, 14417, 14419, 14731, 14743, 14745, 14747,
	14749, 14751, 14753, 14755, 14757, 14759, 14761, 14763, 14765,
	14767, 14769, 14771, 14773, 14775, 14777, 14779, 14781, 14783,
	14785, 14787, 14789, 14791, 15599, 15828, 16046, 16047, 16048,
	16049, 17041, 17043, 17045, 17047, 17279, 18510, 18776, 19272,
	19274, 19275, 19277, 19278, 19280, 19281, 19283, 19284, 19286,
	19287, 19289, 19290, 19292, 19293, 19295, 19296, 19298, 19299,
	19301, 19302, 19304, 19305, 19307, 19374, 19376, 19378, 19449,
	19457, 19465, 19747 };

}
